

--1. Database Exploration

--Explore All objects in the database
select *from INFORMATION_SCHEMA.TABLES

--Explore all colunms in the database (describe)
select * from INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME='gold.dim_customers'

--selecting database and Exploring tables
use project1
select * from [gold.dim_customers]
select * from [gold.dim_products]
select * from [gold.fact_sales]



--2. Dimension Exploration

--Explore all countries customers come from
select distinct country from [gold.dim_customers]

--Explore all major and sub categories of each product
select distinct category, subcategory, product_name from [gold.dim_products]



--3. Date Exploration

--Find the date of first and last order
select min(order_date) first_date,
max(order_date) last_date
from [gold.fact_sales]

--How many years of sales are avaiable
select datediff(year,min(order_date),max(order_date))  as total_years
from [gold.fact_sales]

--Find the youngest and oldest customers
select min(birthdate) oldest,
DATEDIFF(year,min(birthdate),getdate()) oldest_age,
max(birthdate) youngest,
DATEDIFF(year,max(birthdate),getdate()) youngest_age
from [gold.dim_customers]



--4. Measures Exploration

--Find the total sales
select sum(sales_amount) total_sales from [gold.fact_sales]

--Find how many items are sold (total qunatity)
select sum(quantity) total_quantity from [gold.fact_sales]

--find average selling price
select avg(price) avg_price from [gold.fact_sales]

--find total no.of orders
select count(distinct order_number) total_orders from [gold.fact_sales]

--find total no.of products
select count(product_id) total_products from [gold.dim_products]

--find total no.of customers
select count(customer_id) total_customers from [gold.dim_customers]

--find total no.of customers that has placed an order
select count(distinct customer_key) cust_ordered from [gold.fact_sales]


--Generate report of all this measures
select 'total sales' as measure_name, sum(sales_amount) total_sales from [gold.fact_sales]
union all
select 'total quantity' as measure_name, sum(quantity) total_quantity from [gold.fact_sales]
union all
select 'avg price' as measure_name ,avg(price) avg_price from [gold.fact_sales]
union all
select 'total orders' as measure_name ,count(distinct order_number) total_orders from [gold.fact_sales]
union all
select 'total products' as measure_name ,count(product_id) total_products from [gold.dim_products]
union all
select 'total customers' as measure_name, count(customer_id) total_customers from [gold.dim_customers]
union all
select 'total cust ordered' as measure_name, count(distinct customer_key) cust_ordered from [gold.fact_sales]


--5. Magnitude analysis and ordering

--find total customers by countries
select country,count(customer_id) as total_customers from [gold.dim_customers]
group by country
order by total_customers desc

--find total customers by gender
select gender,count(customer_id) as total_customers from [gold.dim_customers]
group by gender
order by total_customers desc

--find total products by category
select category,count(product_id) as total_products from [gold.dim_products]
group by category
order by total_products desc

--find avg costs in each category
select category,avg(cost) as avg_cost from [gold.dim_products]
group by category
order by avg_cost desc

--find total revenue generated for each category
select p.category,sum(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
on p.product_key=s.product_key
group by p.category
order by total_revenue desc

--find total revenue generated by each customers
select c.customer_key,c.first_name,c.last_name,
sum(s.sales_amount) as total_revenue
from [gold.dim_customers] c
left join [gold.fact_sales] s
on c.customer_key=s.customer_key
group by c.customer_key,c.first_name,c.last_name
order by total_revenue desc

--find distribution of sold items (total quantity) acorss countries 
select c.country,
sum(s.quantity) as total_sold_items
from [gold.dim_customers] c
left join [gold.fact_sales] s
on c.customer_key=s.customer_key
group by c.country
order by total_sold_items desc

--find 5 wproducts genearte highest revenue
select top 5 p.product_name,sum(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
on p.product_key=s.product_key
group by p.product_name
order by total_revenue desc

--find 5 wrost performing products in terms of sales
select top 5 p.product_name,sum(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
on p.product_key=s.product_key
group by p.product_name
order by total_revenue 

--find 3 customers with fewest orders placed
select top 3 c.customer_id,c.first_name,c.last_name
,count(distinct s.order_number) as total_order_placed
from [gold.fact_sales] s
left join [gold.dim_customers] c
on s.customer_key=c.customer_key
group by c.customer_id,c.first_name,c.last_name
order by total_order_placed



--6. Time series

--Analyze sales performance over time
select year(order_date) as year,month(order_date) as month
,sum(sales_amount) total_sales from [gold.fact_sales]
where year(order_date) is not null
group by year(order_date),month(order_date)
order by year(order_date),month(order_date) 


--7. cumulative Analysis

--calculate total sales per month and running total of sales over time
with cte as (select year(order_date) as year,month(order_date) as month
,sum(sales_amount) total_sales from [gold.fact_sales]
where year(order_date) is not null
group by year(order_date),month(order_date)
)

select *, sum(total_sales) over(partition by year order by month rows between unbounded preceding and current row) running_total_sales
from cte
order by year,month


--8. performance Analysis

--Analyze the yearly performance of products by comparing their sales to both avg sales performance of product and previous year's sales
--(If we get +ve value for total sales- avg sales then our total sales is above avg)
with cte as(
select year(s.order_date) as order_date,p.product_name,
sum(s.sales_amount)as total_sales 
from [gold.fact_sales] s 
left join [gold.dim_products] p
on s.product_key=p.product_key
where 
order_date is  not null
group by p.product_name,year(s.order_date))

select *,
avg(total_sales) over(partition by product_name) as avg_slaes,
total_sales - avg(total_sales) over(partition by product_name) as 'diffavg' ,
case when total_sales - avg(total_sales) over(partition by product_name)>0 then 'above avg'
     when total_sales - avg(total_sales) over(partition by product_name)<0 then 'below avg'
	 else 'Avg'
end as distribution_of_sales,
lag(total_sales) over(partition by product_name order by order_date) as prev_year_sales,
total_sales -lag(total_sales) over(partition by product_name order by order_date) as diff_cyear_pyear,
case when total_sales -lag(total_sales) over(partition by product_name order by order_date)>0 then 'sales incresed'
     when total_sales -lag(total_sales) over(partition by product_name order by order_date)<0 then 'sales decresed'
	 when total_sales -lag(total_sales) over(partition by product_name order by order_date)=0 then 'constant'

end as sales_performance
from cte



--9. Proportional analysis

--which categories contribute most to overall sales
with cte as(select p.category, sum(s.sales_amount) as total_revenue
from [gold.fact_sales] s
left join [gold.dim_products] p
on p.product_key=s.product_key
group by p.category)

select *, concat(round(cast(total_revenue as float)/(select sum(total_revenue) from cte)*100,2),'%') as percentage_of_total from cte
order by percentage_of_total desc



--10. Data segmentation

--segment products into cost ranges and count how many products fall into each segment
with cte as(select product_name,
case when cost<100 then 'below 100'
     when cost between 100 and 500 then '100-500'
	 when cost between 500 and 1000 then '500-1000'
	 else 'above 1000'
	 end as cost_range
from [gold.dim_products])

select cost_range,count(cost_range) as total_products from cte
group by cost_range
order by total_products desc

/* group customers into 3 segments based on their spending behavior:
  -vip: atleast 12 months of history and spending more than 5000
  -regular: atleast 12 months of history but spending 5000 or less
  -new: lifespan less than 12 months
and find total no.of customers by each group*/
with cte1 as(select c.customer_key,c.first_name,c.last_name
,sum(s.sales_amount) as total_amount_spend,
min(s.order_date) as first_order,
max(s.order_date) as last_order
from [gold.fact_sales] s
left join [gold.dim_customers] c
on s.customer_key=c.customer_key
group by c.customer_key,c.first_name,c.last_name),

cte2 as(select *,
case when datediff(month,first_order,last_order)>=12 and total_amount_spend>5000 then 'vip'
     when datediff(month,first_order,last_order)>=12 and total_amount_spend<=5000 then 'regular'
	 else 'new'
end spending_based_segment
from cte1)

select spending_based_segment, count(spending_based_segment) as total_customers from cte2
group by spending_based_segment
order by total_customers desc



--11. Reporting

/* purpose: Report for key customer metrics and behaviour

Tasks:
     1. Gather fields like names,ages and trancation details
	 2. segment customers into categories (vip,regular,new) and age group
	 3. aggregate customer with:
	     -total orders
		 -total sales
		 -total quantity purchased
		 -total products
		 -lifespan (in months)
	4. calculate KPIs:
	     -recency (how many months since last order)
		 -avg order value  (avg order value=total sales/total no.of orders)
		 -avg monthly spend (avg monthly spending= total sales/no.of months(ie lifespan)) */

create view report_customers as 
--1. Retriev core columns from tables
with cte1 as(select c.customer_key ,concat(c.first_name,' ',c.last_name) as name,
DATEDIFF(year,c.birthdate,GETDATE()) age,
p.product_name,
p.category,
s.order_number,
s.order_date,
s.sales_amount,
s.quantity,
s.price
from [gold.fact_sales] s
left join [gold.dim_products] p
on p.product_key=s.product_key
left join [gold.dim_customers] c
on s.customer_key=c.customer_key
where s.order_date is not null),

--3. aggreate customer data
cte2 as(select customer_key ,name,age,
count(distinct order_number) as total_orders,
sum(sales_amount) total_sales ,
count(quantity) total_quantity,
count(distinct product_name) total_products,
min(order_date) as first_order,
max(order_date) as last_order,
datediff(month,min(order_date) ,max(order_date) ) lifespan
from cte1
group by customer_key ,name,age)

--2. segment customers into categories (vip,regular,new) and age group
--4.calculate KPIs
select customer_key, name,age,
case when age<20 then 'under 20'
     when age between 20 and 29 then '20-29'
	 when age between 30 and 39 then '30-39'
	 when age between 40 and 49 then '40-49'
	 else '50 above'
end age_segment,
total_orders,
total_sales ,
 total_quantity,
total_products,
first_order,
last_order,
datediff(month,last_order,GETDATE()) recency,
lifespan,
case when lifespan>=12 and total_sales>5000 then 'vip'
     when lifespan>=12 and total_sales<=5000 then 'regular'
	 else 'new'
end spending_based_segment,
case when total_sales=0 then 0
else total_sales /total_orders 
end avg_orders,
case when lifespan=0 then  total_sales
else total_sales /lifespan
end avg_montly_spend
from cte2 


--selecting our report table(view)
select * from report_customers
